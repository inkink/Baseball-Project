#include <iostream>
#include "graph.h"

using namespace std;

#define VERTICE 25

int main(int argc, char *argv[])
{
    int** grapha=new int* [VERTICE];
    int** walker= grapha;
    for(int i=0;i<VERTICE;i++){
        *walker=new int[VERTICE];
        walker++;
    }
    int graphb[VERTICE][VERTICE]={{0,680,0,0,0,0,0,0,0,0,1390,0,0,0,0,0,0,2070,0,0,0,0,0,0,0},
                                   {680,0,340,0,650,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,340,0,110,0,0,0,0,0,0,1500,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,0,110,0,400,830,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,650,0,400,0,580,870,1115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,0,0,830,580,0,650,0,560,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,0,0,0,870,650,0,230,460,0,0,0,0,0,0,0,0,0,0,0,0,0,740,0,0},
                                   {0,0,0,0,1115,0,230,0,0,680,0,0,0,0,0,0,0,0,0,0,0,0,0,790,965},
                                   {0,0,0,0,0,560,460,0,0,235,0,0,415,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,680,235,0,465,0,0,0,0,310,0,0,0,0,0,0,0,0,0},
                                   {1390,0,1500,0,0,0,0,0,0,465,0,300,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,0,300,0,80,0,0,0,0,430,0,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,415,0,0,80,0,240,0,250,0,0,0,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,240,0,90,0,0,430,0,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,225,115,0,0,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,310,0,0,250,0,225,0,260,0,0,0,0,0,375,790,0},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,260,0,225,315,0,0,90,0,0,0},
                                   {2070,0,0,0,0,0,0,0,0,0,0,430,0,430,0,0,225,0,430,0,0,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,315,430,0,195,0,0,0,0,1255},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,80,0,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,90,0,0,0},
                                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,90,0,560,0,930},
                                   {0,0,0,0,0,0,740,0,0,0,0,0,0,0,0,375,0,0,0,0,0,560,0,0,600},
                                   {0,0,0,0,0,0,0,790,0,0,0,0,0,0,0,790,0,0,0,0,0,0,0,0,210},
                                   {0,0,0,0,0,0,0,965,0,0,0,0,0,0,0,0,0,0,1255,0,0,930,600,210,0}};
    for(int i=0;i<VERTICE;i++){
        for(int j=0;j<VERTICE;j++)
            grapha[i][j]=graphb[i][j];
    }
    graph test(grapha,25);
    cout<<"path from 4 to 19:"<<endl<<"4";
    test.shortestPath(4,19);
    cout<<endl;
    cout<<"trip: "<<endl;
    cout<<endl<<"total distance: "<<test.findShortestForAllB(2)<<endl;
}
